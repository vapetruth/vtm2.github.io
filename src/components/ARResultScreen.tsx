import { Button } from "./ui/button";
import { Card, CardContent } from "./ui/card";
import { Alert, AlertDescription } from "./ui/alert";
import { useState, useEffect } from "react";

interface ARResultScreenProps {
  onNext: () => void;
  capturedImage: string;
}

export function ARResultScreen({ onNext, capturedImage }: ARResultScreenProps) {
  const [showWarning, setShowWarning] = useState(false);
  const [isProcessing, setIsProcessing] = useState(true);

  useEffect(() => {
    console.log("ARResultScreen ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û:", capturedImage ? "‡∏°‡∏µ‡∏†‡∏≤‡∏û" : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û");
    console.log("‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û:", capturedImage?.length || 0);

    const processingTimer = setTimeout(() => {
      setIsProcessing(false);
    }, 2000);

    const warningTimer = setTimeout(() => {
      setShowWarning(true);
    }, 4000);

    return () => {
      clearTimeout(processingTimer);
      clearTimeout(warningTimer);
    };
  }, [capturedImage]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 to-orange-100 flex items-center justify-center p-4">
      <Card className="w-full max-w-lg mx-auto shadow-2xl">
        <CardContent className="p-6 text-center space-y-6">
          {isProcessing ? (
            <div className="space-y-4">
              <h2 className="text-2xl text-gray-800">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...</h2>
              <div className="flex justify-center">
                <div className="animate-spin w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full"></div>
              </div>
              <p className="text-gray-600">
                ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
              </p>
            </div>
          ) : (
            <>
              <h2 className="text-2xl text-gray-800 mb-4">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á</h2>
              
              <p className="text-gray-600 mb-6">
                ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ
              </p>

              <div className="grid grid-cols-2 gap-4 mb-6">
                {/* ‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô */}
                <div className="text-center">
                  <div className="w-full h-48 bg-gradient-to-br from-green-100 to-blue-100 rounded-lg mb-2 overflow-hidden border-4 border-green-300">
                    {capturedImage ? (
                      <img 
                        src={capturedImage} 
                        alt="‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô" 
                        className="w-full h-full object-cover"
                        onLoad={() => console.log("‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")}
                        onError={() => console.log("‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")}
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center">
                        <div className="text-center">
                          <div className="w-16 h-16 bg-green-500 rounded-full mx-auto mb-2 flex items-center justify-center">
                            <span className="text-white text-2xl">üòä</span>
                          </div>
                          <span className="text-green-700 text-sm">‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</span>
                        </div>
                      </div>
                    )}
                  </div>
                  <span className="text-sm text-green-600 font-medium">‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ</span>
                </div>

                {/* ‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï */}
                <div className="text-center">
                  <div className="w-full h-48 bg-gradient-to-br from-red-100 to-orange-100 rounded-lg mb-2 overflow-hidden border-4 border-red-300 relative">
                    {capturedImage ? (
                      <div className="relative w-full h-full">
                        <img 
                          src={capturedImage} 
                          alt="‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï" 
                          className="w-full h-full object-cover"
                          style={{
                            filter: 'grayscale(60%) contrast(140%) brightness(60%) sepia(40%) saturate(150%)',
                          }}
                          onLoad={() => console.log("‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")}
                          onError={() => console.log("‡∏†‡∏≤‡∏û‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")}
                        />
                        {/* ‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
                        <div className="absolute inset-0 bg-gradient-to-b from-transparent via-transparent to-yellow-200/50"></div>
                        <div className="absolute inset-0 bg-gradient-to-t from-red-200/40 via-transparent to-transparent"></div>
                        <div className="absolute inset-0 bg-gradient-to-r from-orange-200/30 via-transparent to-orange-200/30"></div>
                        
                        <div className="absolute top-2 right-2 text-red-600 text-xs bg-white/90 px-2 py-1 rounded font-semibold">
                          5 ‡∏õ‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
                        </div>
                      </div>
                    ) : (
                      <div className="w-full h-full flex items-center justify-center">
                        <div className="text-center">
                          <div className="w-16 h-16 bg-red-500 rounded-full mx-auto mb-2 flex items-center justify-center">
                            <span className="text-white text-2xl">üò∑</span>
                          </div>
                          <span className="text-red-700 text-sm">5 ‡∏õ‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤</span>
                        </div>
                      </div>
                    )}
                  </div>
                  <span className="text-sm text-red-600 font-medium">‡∏ú‡∏¥‡∏ß‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏° ‡∏ü‡∏±‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á</span>
                </div>
              </div>

              {/* Debug info - ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á */}
              {process.env.NODE_ENV === 'development' && (
                <div className="text-xs text-gray-500 bg-gray-100 p-2 rounded">
                  Debug: {capturedImage ? `‡∏°‡∏µ‡∏†‡∏≤‡∏û (${capturedImage.length} chars)` : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏û"}
                </div>
              )}

              <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-left">
                <h3 className="text-red-800 mb-3 font-semibold">‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô:</h3>
                <div className="grid grid-cols-1 gap-2">
                  {[
                    "‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡∏¢‡πà‡∏ô ‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥",
                    "‡∏ü‡∏±‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", 
                    "‡πÄ‡∏´‡∏á‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö",
                    "‡∏£‡∏¥‡πâ‡∏ß‡∏£‡∏≠‡∏¢‡∏£‡∏≠‡∏ö‡∏õ‡∏≤‡∏Å",
                    "‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏°‡∏≠‡∏á‡∏Ñ‡∏•‡πâ‡∏≥"
                  ].map((item, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-red-500 rounded-full flex-shrink-0"></div>
                      <span className="text-red-700 text-sm">{item}</span>
                    </div>
                  ))}
                </div>
              </div>

              <div className="bg-green-50 border border-green-200 rounded-lg p-4 text-left">
                <h3 className="text-green-800 mb-2 font-semibold">‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤:</h3>
                <div className="grid grid-cols-1 gap-2">
                  {[
                    "‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏™",
                    "‡∏•‡∏°‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏´‡∏≠‡∏°‡∏™‡∏î‡∏ä‡∏∑‡πà‡∏ô",
                    "‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å"
                  ].map((item, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full flex-shrink-0"></div>
                      <span className="text-green-700 text-sm">{item}</span>
                    </div>
                  ))}
                </div>
              </div>

              {showWarning && (
                <Alert className="border-orange-200 bg-orange-50">
                  <AlertDescription className="text-orange-800 text-sm">
                    ‚ö†Ô∏è ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
                  </AlertDescription>
                </Alert>
              )}

              <div className="space-y-3">
                <Button 
                  onClick={onNext}
                  className="w-full bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700 text-white py-3 rounded-lg transition-all duration-300 transform hover:scale-105"
                >
                  ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
                </Button>
                
                <p className="text-xs text-gray-500">
                  ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏¥‡∏Å‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
                </p>
              </div>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}